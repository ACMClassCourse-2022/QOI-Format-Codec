#include <cstdio>
#include <fstream>
#include <iostream>
#include <map>

#include "conv.h"
#include "qoi.h"

void QoiToPnm(std::string fType, bool omitted) {
    auto fName = "temp." + fType;

    std::fstream temp;
    temp.open(fName, std::ios::out | std::ios::binary | std::ios::trunc);

    auto backup = std::cout.rdbuf();
    auto target = temp.rdbuf();

    uint32_t width, height;
    uint8_t channels, colorspace;

    // .qoi -> .rgb(a)
    std::cout.rdbuf(target); // redirect std::cout to ofstream temp
    QoiDecode(width, height, channels, colorspace);
    std::cout.rdbuf(backup); // restore std::cout buffer

    // image type check
    if (fType == "rgb" && channels != 3) {
        std::cerr << "image type doesnt match the channel number" << std::endl;
        return ;
    }
    if (fType == "rgba" && channels != 4) {
        std::cerr << "image type doesnt match the channel number" << std::endl;
        return;
    }

    // .rgb(a) -> .ppm/pam
    temp.close();
    temp.open(fName, std::ios::in | std::ios::binary);
    try {
        if (fType == "rgb") {
            RgbToPpm(temp, std::cout, width, height);
        } else {
            RgbaToPam(temp, std::cout, width, height);
        }
    } catch (const char *msg) {
        std::cerr << msg << std::endl;
        return;
    } catch (...) {
        std::cerr << "an error is raised during conversion" << std::endl;
    }
    temp.close();

    if (omitted) std::remove(fName.c_str());
}

void PnmToQoi(std::string fType, bool omitted) {
    auto fName = "temp." + fType;

    std::fstream temp;
    temp.open(fName, std::ios::out | std::ios::binary | std::ios::trunc);

    uint32_t width, height;
    uint8_t channels, colorspace;

    // .ppm/pam -> .rgb(a)
    try {
        if (fType == "rgb") {
            PpmToRgb(std::cin, temp, width, height);
            channels = 3u;
        } else {
            PamToRgba(std::cin, temp, width, height);
            channels = 4u;
        }
    } catch (const char *msg) {
        std::cerr << msg << std::endl;
        return;
    } catch (...) {
        std::cerr << "an error is raised during conversion" << std::endl;
    }

    temp.close();
    temp.open(fName, std::ios::in | std::ios::binary);

    auto backup = std::cin.rdbuf();
    auto target = temp.rdbuf();

    // .rgb(a) -> .qoi
    std::cin.rdbuf(target); // redirect std::cin to ifstream temp
    QoiEncode(width, height, channels, 0u);
    std::cin.rdbuf(backup); // restore std::cin buffer

    temp.close();

    if (omitted) std::remove(fName.c_str());
}

int main(int argc, char *argv[]) {
    if (argc <= 1) {
        std::cerr << "too few arguments" << std::endl;
        return 0;
    }
    std::map<std::string, bool> args;
    for (int i = 1; i < argc; ++i) args[argv[i]] = true;

    if (args["-h"]) {
        std::string helpinfo = 
R"(Hi, im a command line qoi <-> ppm/pam converter :-)

Usage: ./conv [options...] [<path/to/image] [>path/to/image]
    -h  Get help information
    -d  Convert qoi to ppm/pam
    -e  Convert ppm/pam to qoi
    -3  Prompt me that im converting rgb images
    -4  Prompt me that im converting rgba images
    -o  Omit temporary files generated by the intermediate process
    <path/to/image  Redirect stdin to an image file
    >path/to/image  Redirect stdout to an image file

Examples:
    qoi -> ppm: ./conv -d -3 <sample/rgb/kodim23.qoi >kodim23.ppm
    pam -> qoi: ./conv -e -4 -o <sample/rgba/dice.pam >dice.qoi
)";
        std::cerr << helpinfo;
        return 0;
    }

    if (args["-e"] && args["-d"]) {
        std::cerr << "-d and -e options conflict with one anthor, please choose only one." << std::endl;
        return 0;
    }

    std::string type = args["-4"] ? "rgba" : "rgb";
    if (args["-e"]) PnmToQoi(type, args["-o"]);
    if (args["-d"]) QoiToPnm(type, args["-o"]);
    return 0;
}
